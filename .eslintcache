[{"/home/user/todo/src/index.js":"1","/home/user/todo/src/reportWebVitals.js":"2","/home/user/todo/src/App.js":"3","/home/user/todo/src/Todo/TodoList.js":"4","/home/user/todo/src/Todo/Footer.js":"5","/home/user/todo/src/Todo/Header.js":"6","/home/user/todo/src/Todo/TodoItem.js":"7"},{"size":500,"mtime":1607417372591,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607417372591,"results":"10","hashOfConfig":"9"},{"size":2496,"mtime":1607955879474,"results":"11","hashOfConfig":"9"},{"size":582,"mtime":1607928989928,"results":"12","hashOfConfig":"9"},{"size":1354,"mtime":1607945022013,"results":"13","hashOfConfig":"9"},{"size":2148,"mtime":1607950615639,"results":"14","hashOfConfig":"9"},{"size":2257,"mtime":1607949361370,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"czga49",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/user/todo/src/index.js",[],["33","34"],"/home/user/todo/src/reportWebVitals.js",[],"/home/user/todo/src/App.js",["35","36"],"/home/user/todo/src/Todo/TodoList.js",[],"/home/user/todo/src/Todo/Footer.js",[],"/home/user/todo/src/Todo/Header.js",["37"],"import shortid from \"shortid\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"./../App.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// после добавления первого элемента должен появиться checkbox,по нажатию на который \"все task будут отмечаться как выполненные\"\n// добавление элементов по нажатию  'enter'\ntoast.configure()\nfunction Header(props) {\n  const [out, setOut] = useState(\"\");\n  \n\n  function showInput(event) {\n    setOut(event.target.value);\n  }\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.addElement({\n      id: shortid.generate(),\n      text: out,\n      done: false,\n    });\n    setOut(\"\");\n  };\n  const allDone=()=>{\n    \n    toast.warning('All tasks completed',{autoClose:2000})\n  }\n  const newTask=()=>{\n    toast.success('New task',{autoClose:2000})\n  }\n  let displayElement=''\n  if(props.newTodos.length > 0){\n    displayElement = (\n      <form onSubmit={handleSubmit} >\n      <div className='Header-all-done'>\n      <input  id='all-done'  type=\"checkBox\"  checked hidden   onChange={() => props.doneAll()} onMouseDown={allDone}/>\n      <label for='all-done' onClick={() => props.doneAll()}></label>\n      </div>\n      \n      <div className='Header-input'>\n        <input id='input'\n          type=\"text\"\n          onFocus={newTask}\n         placeholder=\"What needs to be done?\"\n          onChange={showInput}\n          value={out}\n        />\n      </div>\n      \n      \n    </form>\n\n    )\n  }else{\n    displayElement=(\n\n      <form onSubmit={handleSubmit} >\n     \n      \n      <div className='Header-input'>\n        <input id='input'\n          type=\"text\"\n          onFocus={newTask}\n         placeholder=\"What needs to be done?\"\n          onChange={showInput}\n          value={out}\n        />\n      </div>\n      \n      \n    </form>\n    )\n  }\n\n  return (\n    <div className='header'>\n      <div className='todos'>todos</div>\n      {displayElement}\n    </div>\n  );\n}\n\nexport default Header;\n","/home/user/todo/src/Todo/TodoItem.js",["38","39"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"./../App.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// import Header from './Header'\n//при наведении на элемент должна появляться кнопка удаления\n\ntoast.configure();\nfunction TodoItem({ todo, onChange, deleteTodo, editText }) {\n  const [edit, setEdite] = React.useState(\"false\");\n  const [title, editTitle] = React.useState(\"\");\n\n  const showInput = (event) => {\n    editTitle(event.target.value);\n    console.log(\"state\", title);\n  };\n  let displayElement = \"\";\n\n  const chengeModeFalse = () => {\n    setEdite(\"false\");\n  };\n\n  const chengeModeTrue = () => {\n    setEdite(\"true\");\n  };\n  if (edit === \"true\") {\n    displayElement = (\n      <input\n        type='text'\n        defaultValue={todo.text}\n        onBlur={chengeModeFalse}\n        onChange={showInput}\n      />\n    );\n  } else {\n    displayElement = (\n      <span\n        onDoubleClick={chengeModeTrue}\n        style={{\n          textDecoration: todo.done ? \"line-through\" : \"\",\n          color: todo.done ? \"gray\" : \"\",\n          marginTop: \"0.5%\",\n          fontSize: \"30px\",\n\n          textIndent: \"21px\",\n        }}>\n        {todo.text}\n      </span>\n    );\n  }\n\n  let newText = title;\n\n  const deleteTask = () => {\n    toast.error(\"Task deleted\");\n  };\n  const editTask = () => {\n    toast.info(\"Edit task\");\n  };\n\n  return (\n    <li\n      \n      className='TodoItems'\n      onBlur={() => {\n        editText(todo.id, newText);\n      }}>\n      <div className='TodoItems-checkBox'>\n       \n        <input id='check' checked hidden\n          type='checkBox'\n          onChange={() => onChange(todo.id)}\n          checked={todo.done}\n        />\n        <label for='chech' onClick={() => onChange(todo.id)}></label>\n      </div>\n\n      <div className='TodoItems-span' onDoubleClick={editTask}> {displayElement}   </div>\n      <div className='TodoItems-span-delite'>  <span\n        onClick={() => deleteTodo(todo.id)}\n        onMouseDown={deleteTask}>\n        x</span>   </div>\n      \n    </li>\n  );\n}\nTodoItem.propTypes = {\n  todo: PropTypes.object,\n  onChange: PropTypes.func,\n};\nexport default TodoItem;\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":6,"column":10,"nodeType":"46","messageId":"47","endLine":6,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":66,"column":36,"nodeType":"50","messageId":"51","endLine":66,"endColumn":38},{"ruleId":"44","severity":1,"message":"52","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":24},{"ruleId":"44","severity":1,"message":"52","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":24},{"ruleId":"53","severity":1,"message":"54","line":75,"column":11,"nodeType":"55","endLine":75,"endColumn":30},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'func' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ToastContainer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]